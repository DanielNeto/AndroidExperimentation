/*
 * Copyright (C) The Ambient Dynamix Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ambientdynamix.security;

import java.io.Serializable;

import org.ambientdynamix.api.contextplugin.ContextPlugin;
import org.ambientdynamix.api.contextplugin.security.PrivacyRiskLevel;

import android.util.Log;

/**
 * PluginPrivacySettings describes the maximum PrivacyRiskLevel that a given application is allowed to receive from a
 * specific ContextPlugin within the Dynamix Framework. Applications maintain a List of PluginPrivacySettings, which
 * represents the mappings between all installed ContextPlugins and the associated maximum PrivacyRisks that an
 * application is allowed to receive from each. During runtime, the PrivacyRiskLevel associated with SecuredEvents
 * (generated by ContextPluginRuntimes) are compared against the application's PluginSecurityPolicy for a given
 * ContextPlugin to determine whether or not ContextEvent data should be provisioned to the application.
 * 
 * @see ContextPlugin
 * @see PrivacyRiskLevel
 * @see PrivacyPolicy
 * @author Darren Carlson
 */
public class PluginPrivacySettings implements Serializable {
	private static final long serialVersionUID = -7345301506372721926L;
	// Private data
	private final String TAG = this.getClass().getSimpleName();
	private ContextPlugin plugin;
	private PrivacyRiskLevel overrideMaxLevel;
	private PrivacyPolicy privacyPolicy;

	/**
	 * Needed for DB4o
	 */
	public PluginPrivacySettings() {
	}

	/**
	 * Creates a PluginPrivacySettings using the plugin and privacyPolicy
	 * 
	 * @param plugin
	 *            The ContextPlugin.
	 * @param privacyPolicy
	 *            The PrivacyPolicy
	 */
	public PluginPrivacySettings(ContextPlugin plugin, PrivacyPolicy privacyPolicy) {
		this(plugin, privacyPolicy, null);
	}

	/**
	 * Creates a PluginPrivacySettings with all available options
	 * 
	 * @param plugin
	 *            The ContextPlugin
	 * @param privacyPolicy
	 *            The PrivacyPolicy
	 * @param overrideMaxLevel
	 *            An override for the PrivacyPolicy's default PrivacyRiskLevel for the incoming ContextPlugin
	 */
	public PluginPrivacySettings(ContextPlugin plugin, PrivacyPolicy privacyPolicy, PrivacyRiskLevel overrideMaxLevel) {
		if (plugin == null)
			throw new RuntimeException("Null ContextPlugin!");
		if (privacyPolicy == null)
			throw new RuntimeException("Null PrivacyPolicy!");
		this.plugin = plugin;
		this.overrideMaxLevel = overrideMaxLevel;
		this.privacyPolicy = privacyPolicy;
	}

	@Override
	public boolean equals(Object candidate) {
		if (this == candidate)
			return true;
		else if (candidate instanceof PluginPrivacySettings) {
			PluginPrivacySettings test = (PluginPrivacySettings) candidate;
			if (plugin.equals(test.plugin))
				return this.privacyPolicy.equals(test.privacyPolicy) ? true : false;
		}
		return false;
	}

	/**
	 * Returns the maximum PrivacyRiskLevel allowed for the ContextPlugin. If the PluginPrivacySettings is custom, the
	 * overrideMaxLevel is returned. Otherwise, the maximum PrivacyRiskLevel associated with the privacyPolicy is
	 * returned.
	 */
	public PrivacyRiskLevel getMaxPrivacyRisk() {
		if (isCustom())
			return overrideMaxLevel;
		else
			return privacyPolicy.getMaxPrivacyRisk(plugin);
	}

	/**
	 * Returns the ContextPlugin
	 */
	public ContextPlugin getPlugin() {
		return this.plugin;
	}

	/**
	 * Returns the PrivacyPolicy
	 */
	public PrivacyPolicy getPrivacyPolicy() {
		return privacyPolicy;
	}

	@Override
	public int hashCode() {
		int result = 17;
		result = 31 * result + this.plugin.hashCode() + privacyPolicy.hashCode();
		return result;
	}

	/**
	 * Returns true if the assigned PrivacyRiskLevel differs from default PrivacyRisk; false otherwise
	 */
	public boolean isCustom() {
		// If overrideMaxLevel is not null, there's the chance that we're custom
		if (overrideMaxLevel != null) {
			// If the overrideMaxLevel is not equal to the privacyPolicy's
			// PrivacyRisk, then we are custom
			if (!overrideMaxLevel.equals(privacyPolicy.getMaxPrivacyRisk(plugin)))
				return true;
		}
		return false;
	}

	/**
	 * Overrides the PrivacyRiskLevel associated with the PrivacyPolicy. If overrideMaxLevel is null, this method
	 * behaves like setDefaultMaxPrivacyRisk().
	 * 
	 * @param overrideMaxLevel
	 *            The new maximum PrivacyRisk.
	 */
	public void overrideMaxPrivacyRisk(PrivacyRiskLevel overrideMaxLevel) {
		this.overrideMaxLevel = overrideMaxLevel;
	}

	/**
	 * Sets the default PrivacyRiskLevel associated with the current PrivacyPolicy, clearing any overriden maximum
	 * PrivacyRiskLevel settings.
	 */
	public void setDefaultMaxPrivacyRisk() {
		this.overrideMaxLevel = null;
	}

	/**
	 * Sets the new PrivacyPolicy, maintaining any previous PrivacyRiskLevel override value.
	 */
	public synchronized void setPrivacyPolicy(PrivacyPolicy privacyPolicy) {
		if (privacyPolicy != null)
			this.privacyPolicy = privacyPolicy;
		else
			Log.w(TAG, "Null PrivacyPolicy");
	}
}